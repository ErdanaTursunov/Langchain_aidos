const sequelize = require("../db");
const searchByUdcTopic = require("./searchByUdcTopic");

async function searchByUdc(topic) {
  try {
    // üîπ –®–∞–≥ 1: –ò—â–µ–º TITLE_INDEX_GI –ø–æ MAIN_TOPIC
    const titleIndices = await searchByUdcTopic(topic);

    if (titleIndices.length === 0) {
      console.log('‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å—ã UDC –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return []; 
    }

    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã UDC:', titleIndices);

    // üîπ –®–∞–≥ 2: –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏—â–µ–º –∫–Ω–∏–≥–∏
    let allBooks = [];
    console.time('‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥');
    
    for (const index of titleIndices) {
      // –û—á–∏—â–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç –∫–∞–≤—ã—á–µ–∫
      const cleanIndex = index.replace(/^'|'$/g, '');
      console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å: '${index}' ‚Üí '${cleanIndex}'`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–ø—Ä–æ—Å–µ
      let records = [];
      try {
        const recordsQuery = `
          SELECT * FROM public."_BR_RECORD"
          WHERE "VALUE" LIKE '''${cleanIndex}%'
          ORDER BY 
            CASE 
              WHEN "VALUE" = '''${cleanIndex}''' THEN 1  -- –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
              WHEN "VALUE" LIKE '''${cleanIndex}%' THEN 2  -- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–Ω–¥–µ–∫—Å–∞
              ELSE 3  -- –î—Ä—É–≥–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            END,
            LENGTH("VALUE"), "VALUE"
          LIMIT 10;
        `;
        
        console.log(`üîç –ü–æ–∏—Å–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '${cleanIndex}'`);
        
        records = await sequelize.query(recordsQuery, {
          type: sequelize.QueryTypes.SELECT,
        });
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–ø–∏—Å–µ–π: ${error.message}`);
        
        // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        try {
          const fallbackQuery = `
            SELECT * FROM public."_BR_RECORD"
            WHERE "VALUE" LIKE '''${cleanIndex}%'
            LIMIT 10;
          `;
          
          console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '${cleanIndex}'`);
          records = await sequelize.query(fallbackQuery, {
            type: sequelize.QueryTypes.SELECT,
          });
        } catch (fallbackError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∞—Å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ: ${fallbackError.message}`);
          continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        }
      }
      
      console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '${cleanIndex}'`);
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
      if (records.length > 0) {
        const bookIds = records.map(record => record.BR_ID);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å ID –∫–Ω–∏–≥, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
        if (bookIds.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º CAST –∫ –∫–∞–∂–¥–æ–º—É ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤
          const castBookIds = bookIds.map(id => `CAST('${id}' AS VARCHAR)`).join(',');
          
          try {
            const booksQuery = `
              SELECT "TITLE", "AUTHOR", "BR_ID"
              FROM "_BR"
              WHERE "BR_ID"::VARCHAR IN (${castBookIds})
              AND "TITLE" IS NOT NULL 
              AND "TITLE" <> '' 
              AND "TITLE" <> ''''
              ORDER BY 
                "BR_ID",
                CASE 
                  WHEN "AUTHOR" ILIKE :topic THEN 1  -- –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–º–æ–π –≤ –∞–≤—Ç–æ—Ä–µ
                  WHEN "TITLE" ILIKE :topic THEN 2  -- –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–µ–º–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                  ELSE 3  -- –î—Ä—É–≥–∏–µ –∫–Ω–∏–≥–∏
                END,
                LENGTH("TITLE") ASC
              LIMIT 20;
            `;
            
            const books = await sequelize.query(booksQuery, {
              replacements: { topic: `%${topic}%` },
              type: sequelize.QueryTypes.SELECT,
            });
            
            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '${cleanIndex}'`);
            allBooks = [...allBooks, ...books];
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
            
            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            try {
              const simpleBooksQuery = `
                SELECT "TITLE", "AUTHOR", "BR_ID"
                FROM "_BR"
                WHERE "BR_ID"::VARCHAR IN (${castBookIds})
                AND "TITLE" IS NOT NULL 
                AND "TITLE" <> '' 
                AND "TITLE" <> ''''
                ORDER BY "BR_ID"
                LIMIT 20;
              `;
              
              console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–Ω–∏–≥`);
              const books = await sequelize.query(simpleBooksQuery, {
                type: sequelize.QueryTypes.SELECT,
              });
              
              console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ (–∑–∞–ø–∞—Å–Ω–æ–π –∑–∞–ø—Ä–æ—Å) –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ '${cleanIndex}'`);
              allBooks = [...allBooks, ...books];
            } catch (fallbackError) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∞—Å–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫–Ω–∏–≥: ${fallbackError.message}`);
            }
          }
        }
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–Ω–∏–≥
    const uniqueBooks = [];
    const bookIds = new Set();
    
    for (const book of allBooks) {
      if (!bookIds.has(book.BR_ID)) {
        bookIds.add(book.BR_ID);
        uniqueBooks.push(book);
      }
    }
    
    console.timeEnd('‚è±Ô∏è –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥');
    console.log(`üìö –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥: ${uniqueBooks.length}`);

    return uniqueBooks;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ searchByUdc:", error);
    throw error;
  }
}

module.exports = searchByUdc;
