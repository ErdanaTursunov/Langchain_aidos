const sequelize = require("../db");

async function searchByUdcTopic(topic) {
  try {
    console.log('\n===== –ü–æ–∏—Å–∫ –ø–æ UDC —Ç–µ–º–µ =====');
    console.log('üìù –¢–µ–º–∞ –ø–æ–∏—Å–∫–∞:', topic);
    
    // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
    const capitalizedTopic = topic.charAt(0).toUpperCase() + topic.slice(1).toLowerCase();
    
    // –ü–æ–∏—Å–∫ UDC –∫–æ–¥–æ–≤ –ø–æ —Ç–µ–º–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    let query = `
      SELECT "TITLE_INDEX_GI", "MAIN_TOPIC"
      FROM "_UDC"
      WHERE "MAIN_TOPIC" COLLATE "en_US.UTF-8" ILIKE :topic
      ORDER BY 
        CASE 
          WHEN "MAIN_TOPIC" COLLATE "en_US.UTF-8" = :exactTopic THEN 1  -- –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          WHEN "MAIN_TOPIC" COLLATE "en_US.UTF-8" LIKE :topicStart THEN 2  -- –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–º—ã
          WHEN "MAIN_TOPIC" COLLATE "en_US.UTF-8" LIKE :topicEnd THEN 3  -- –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–µ–º—É
          ELSE 4  -- –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–º—É –≥–¥–µ-—Ç–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        END,
        LENGTH("MAIN_TOPIC") ASC  -- –ë–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–º—ã —Å–Ω–∞—á–∞–ª–∞
      LIMIT 10
    `;
    
    const replacements = { 
      topic: `%${capitalizedTopic}%`,
      exactTopic: capitalizedTopic,
      topicStart: `${capitalizedTopic}%`,
      topicEnd: `%${capitalizedTopic}`
    };
    
    console.log('üîç SQL –∑–∞–ø—Ä–æ—Å:', query);
    console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', replacements);
    
    let udcResults;
    try {
      udcResults = await sequelize.query(query, {
        replacements,
        type: sequelize.QueryTypes.SELECT,
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ searchByUdcTopic:", error);
      
      // –†–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      const fallbackQuery = `
        SELECT "TITLE_INDEX_GI", "MAIN_TOPIC"
        FROM "_UDC"
        WHERE "MAIN_TOPIC" COLLATE "en_US.UTF-8" ILIKE :topic
        ORDER BY "MAIN_TOPIC"
        LIMIT 10
      `;
      
      console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
      udcResults = await sequelize.query(fallbackQuery, {
        replacements: { topic: `%${capitalizedTopic}%` },
        type: sequelize.QueryTypes.SELECT,
      });
    }
    
    console.log('üìä –ù–∞–π–¥–µ–Ω–æ UDC –∑–∞–ø–∏—Å–µ–π:', udcResults.length);
    
    if (udcResults.length === 0) {
      return [];
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ('XXX')
    const titleIndices = udcResults
      .map((row) => {
        const title = row.TITLE_INDEX_GI?.trim();
        if (!title) return null;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ ('XXX')
        const match = title.match(/\('([^']+)'/);
        if (match) {
          return match[1].trim(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫
        }
        
        return title;
      })
      .filter(Boolean);
    
    console.log('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã:', titleIndices);
    
    return titleIndices;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ searchByUdcTopic:", error);
    throw error;
  }
}

module.exports = searchByUdcTopic;
